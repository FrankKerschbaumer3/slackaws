Transform: 'AWS::Serverless-2016-10-31'
Description: Template to create a Slack Bot Lambda function to report CodeBuild build status

Parameters:

  AppName:
    Type: String
    Description: Application being deployed

  SlackHook:
    Type: String
    Description: URL of Slack notification
    NoEcho: True

  CodeBuildNames:
    Type: CommaDelimitedList
    Description: Names of codebuild jobs to be tied to notifications

  ChannelName:
    Type: String
    Description: (Optional) Name of Channel.

Resources:

  SlackHookFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: !Sub "SlackBot for ${AppName}"
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LambdaExecutionRole.Arn
      InlineCode: |
        'use strict'
<<<<<<< HEAD:slackbot.yaml

        const https = require('https')
        const url = require('url')

=======
        
        const https = require('https')
        const url = require('url')

>>>>>>> dev:Test.yaml
        const CHANNEL = process.env.CHANNEL
        const SLACK_HOOK_URL = process.env.SLACK_HOOK_URL

        // Handle the CodeBuild CloudWatch Event and post the message to slack so we know the progress of our build.
<<<<<<< HEAD:slackbot.yaml
        function handler(event, context) {
            console.log(JSON.stringify(event))

            const status = event.detail['build-status']
            const project = event.detail['project-name']
            const buildId = event.detail['build-id'].split(":").pop()
            const projectUrl = `https://console.aws.amazon.com/codebuild/home?region=us-east-1#/builds/${project}:${buildId}/view/new`
=======
        //
        function handler = function(event, context) {
        
            console.log(JSON.stringify(event))

            const status = event.detail['build-status']
            const project = event.detail['project-name']
            const buildId = event.detail['build-id'].split(":").pop()
            const projectUrl = `https://console.aws.amazon.com/codebuild/home?region=us-east-1#/builds/${project}:${buildId}/view/new`
            // If failed.  Get logs path.

            var text = project+'\n'+' '+status
>>>>>>> dev:Test.yaml

            // If failed.  Get logs path.
            var text = project + '\n' + ' ' + status
            if (status === 'IN_PROGRESS') {
                text += '\n'
                text += projectUrl
            }

            if (status === 'SUCCEEDED') {
                text += '\n'
                text += projectUrl
            }

            if (status === 'FAILED') {
                text += '\n'
<<<<<<< HEAD:slackbot.yaml
                text += 'https://console.aws.amazon.com/cloudwatch/home?region=' + event.region + '#logEventViewer:group=/aws/codebuild/' + project + ';start=PT5M'
            }

            postToSlack(text, SLACK_HOOK_URL, function (err, results) {
=======
                text += 'https://console.aws.amazon.com/cloudwatch/home?region='+event.region+'#logEventViewer:group=/aws/codebuild/'+project+'start=PT5M'
            }

            functions.slack(text, SLACK_HOOK_URL, function(err, results) {
>>>>>>> dev:Test.yaml
                if (err) return context.fail(err)
                else return context.succeed(results)
            })
        }

        // Post a message to the slack hook.
        function postToSlack(text, hook_url, done) {
            const slack_hook_url_parts = url.parse(hook_url)

            const options = {
                hostname: slack_hook_url_parts.host,
                port: 443,
                path: slack_hook_url_parts.pathname,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }
<<<<<<< HEAD:slackbot.yaml

            console.log(JSON.stringify(options))

            var req = https.request(options, function (res) {
                res.setEncoding('utf8')
                res.on('data', function (chunk) {
                    console.log('data')
                    done(null, chunk)
                })
                res.on('end', function () {
=======
            console.log(JSON.stringify(options))

            var req = https.request(options, function(res) {
                res.setEncoding('utf8')
                res.on('data', function(chunk) {
                    console.log('data')
                    done(null, chunk)
                })
                res.on('end', function() {
>>>>>>> dev:Test.yaml
                    console.log('end')
                    done(null, null)
                })
            })

<<<<<<< HEAD:slackbot.yaml
            req.on('error', function (err) {
=======
            req.on('error', function(err) {
>>>>>>> dev:Test.yaml
                done(err, null)
            })

            // write data to request body
            req.write(JSON.stringify({
                channel: CHANNEL,
                username: "CodeBuildBot",
                text: text,
                icon_emoji: ":codebuild:"
            }))

<<<<<<< HEAD:slackbot.yaml
=======
            }))
>>>>>>> dev:Test.yaml
            req.end()
        }

        module.exports = { handler }
      Events:
        CloudWatchEvent1:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              detail-type:
                - CodeBuild Build State Change
              source:
                - aws.codebuild
              detail:
                project-name: !Ref CodeBuildNames
                build-status:
                  - IN_PROGRESS
                  - SUCCEEDED
                  - FAILED
      Environment:
        Variables:
          SLACK_HOOK_URL: !Ref SlackHook
          CHANNEL: !Ref ChannelName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: SlackBotLogAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: '*'
